From e8ff1a237a03b303057eace05814d8214caacd27 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Jan=C3=9Fen?= <janssen@mpie.de>
Date: Sun, 28 Jan 2024 15:43:43 +0100
Subject: [PATCH] add matgl

---
 src/ML-M3GNET/LICENSE            | 350 +++++++++++++++
 src/ML-M3GNET/m3gnet_driver.py   | 128 ++++++
 src/ML-M3GNET/matgl_driver.py    | 127 ++++++
 src/ML-M3GNET/pair_m3gnet.cpp    | 727 +++++++++++++++++++++++++++++++
 src/ML-M3GNET/pair_m3gnet.h      |  91 ++++
 src/ML-M3GNET/pair_m3gnet_d3.cpp |  31 ++
 src/ML-M3GNET/pair_m3gnet_d3.h   |  36 ++
 7 files changed, 1490 insertions(+)
 create mode 100644 src/ML-M3GNET/LICENSE
 create mode 100644 src/ML-M3GNET/m3gnet_driver.py
 create mode 100644 src/ML-M3GNET/matgl_driver.py
 create mode 100644 src/ML-M3GNET/pair_m3gnet.cpp
 create mode 100644 src/ML-M3GNET/pair_m3gnet.h
 create mode 100644 src/ML-M3GNET/pair_m3gnet_d3.cpp
 create mode 100644 src/ML-M3GNET/pair_m3gnet_d3.h

diff --git a/src/ML-M3GNET/LICENSE b/src/ML-M3GNET/LICENSE
new file mode 100644
index 00000000000..f9489c8cf8e
--- /dev/null
+++ b/src/ML-M3GNET/LICENSE
@@ -0,0 +1,350 @@
+GNU GENERAL PUBLIC LICENSE
+
+Version 2, June 1991 
+
+Copyright (C) 1989, 1991 Free Software Foundation, Inc.  
+51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+
+Everyone is permitted to copy and distribute verbatim copies of this
+license document, but changing it is not allowed.
+
+Preamble
+
+The licenses for most software are designed to take away your freedom
+to share and change it. By contrast, the GNU General Public License is
+intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users. This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it. (Some other Free Software Foundation software is covered by
+the GNU Library General Public License instead.) You can apply it to
+your programs, too.
+
+When we speak of free software, we are referring to freedom, not
+price. Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the
+rights. These restrictions translate to certain responsibilities for
+you if you distribute copies of the software, or if you modify it.
+
+For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have. You must make sure that they, too, receive or can get the
+source code. And you must show them these terms so they know their
+rights.
+
+We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software. If the software is modified by someone else and passed on,
+we want its recipients to know that what they have is not the
+original, so that any problems introduced by others will not reflect
+on the original authors' reputations.
+
+Finally, any free program is threatened constantly by software
+patents. We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary. To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at
+all.
+
+The precise terms and conditions for copying, distribution and
+modification follow.
+
+TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+0. This License applies to any program or other work which contains a
+notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License. The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language. (Hereinafter, translation is included without limitation in
+the term "modification".) Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope. The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the Program
+(independent of having been made by running the Program). Whether that
+is true depends on what the Program does.
+
+1. You may copy and distribute verbatim copies of the Program's source
+code as you receive it, in any medium, provided that you conspicuously
+and appropriately publish on each copy an appropriate copyright notice
+and disclaimer of warranty; keep intact all the notices that refer to
+this License and to the absence of any warranty; and give any other
+recipients of the Program a copy of this License along with the
+Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a
+fee.
+
+2. You may modify your copy or copies of the Program or any portion of
+it, thus forming a work based on the Program, and copy and distribute
+such modifications or work under the terms of Section 1 above,
+provided that you also meet all of these conditions:
+
+     a) You must cause the modified files to carry prominent notices
+     stating that you changed the files and the date of any change.
+
+     b) You must cause any work that you distribute or publish, that
+     in whole or in part contains or is derived from the Program or
+     any part thereof, to be licensed as a whole at no charge to all
+     third parties under the terms of this License.
+
+     c) If the modified program normally reads commands interactively
+     when run, you must cause it, when started running for such
+     interactive use in the most ordinary way, to print or display an
+     announcement including an appropriate copyright notice and a
+     notice that there is no warranty (or else, saying that you
+     provide a warranty) and that users may redistribute the program
+     under these conditions, and telling the user how to view a copy
+     of this License. (Exception: if the Program itself is interactive
+     but does not normally print such an announcement, your work based
+     on the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole. If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works. But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote
+it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+     a) Accompany it with the complete corresponding machine-readable
+     source code, which must be distributed under the terms of
+     Sections 1 and 2 above on a medium customarily used for software
+     interchange; or,
+
+     b) Accompany it with a written offer, valid for at least three
+     years, to give any third party, for a charge no more than your
+     cost of physically performing source distribution, a complete
+     machine-readable copy of the corresponding source code, to be
+     distributed under the terms of Sections 1 and 2 above on a medium
+     customarily used for software interchange; or,
+
+     c) Accompany it with the information you received as to the offer
+     to distribute corresponding source code. (This alternative is
+     allowed only for noncommercial distribution and only if you
+     received the program in object code or executable form with such
+     an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it. For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable. However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License. Any attempt otherwise
+to copy, modify, sublicense or distribute the Program is void, and
+will automatically terminate your rights under this License. However,
+parties who have received copies, or rights, from you under this
+License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+5. You are not required to accept this License, since you have not
+signed it. However, nothing else grants you permission to modify or
+distribute the Program or its derivative works. These actions are
+prohibited by law if you do not accept this License. Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions. You may not impose any further
+restrictions on the recipients' exercise of the rights granted
+herein. You are not responsible for enforcing compliance by third
+parties to this License.
+
+7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License. If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all. For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded. In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+9. The Free Software Foundation may publish revised and/or new
+versions of the General Public License from time to time. Such new
+versions will be similar in spirit to the present version, but may
+differ in detail to address new problems or concerns.
+
+Each version is given a distinguishing version number. If the Program
+specifies a version number of this License which applies to it and
+"any later version", you have the option of following the terms and
+conditions either of that version or of any later version published by
+the Free Software Foundation. If the Program does not specify a
+version number of this License, you may choose any version ever
+published by the Free Software Foundation.
+
+10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the
+author to ask for permission. For software which is copyrighted by the
+Free Software Foundation, write to the Free Software Foundation; we
+sometimes make exceptions for this. Our decision will be guided by the
+two goals of preserving the free status of all derivatives of our free
+software and of promoting the sharing and reuse of software generally.
+
+NO WARRANTY
+
+11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
+WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
+LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS
+AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
+AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
+PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
+FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF
+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGES.
+
+END OF TERMS AND CONDITIONS
+
+How to Apply These Terms to Your New Programs
+
+If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these
+terms.
+
+To do so, attach the following notices to the program. It is safest to
+attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+one line to give the program's name and an idea of what it does.
+Copyright (C) yyyy  name of author
+
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2 of the License, or (at
+your option) any later version.
+
+This program is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+Also add information on how to contact you by electronic and paper mail. 
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+Gnomovision version 69, Copyright (C) year name of author
+Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
+type `show w'.  This is free software, and you are welcome
+to redistribute it under certain conditions; type `show c' 
+for details.
+
+The hypothetical commands `show w' and `show c' should show the
+appropriate parts of the General Public License. Of course, the
+commands you use may be called something other than `show w' and `show
+c'; they could even be mouse-clicks or menu items--whatever suits your
+program.
+
+You should also get your employer (if you work as a programmer) or
+your school, if any, to sign a "copyright disclaimer" for the program,
+if necessary. Here is a sample; alter the names:
+
+Yoyodyne, Inc., hereby disclaims all copyright
+interest in the program `Gnomovision'
+(which makes passes at compilers) written 
+by James Hacker.
+
+signature of Ty Coon, 1 April 1989
+Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program
+into proprietary programs. If your program is a subroutine library,
+you may consider it more useful to permit linking proprietary
+applications with the library. If this is what you want to do, use the
+GNU Library General Public License instead of this License.
diff --git a/src/ML-M3GNET/m3gnet_driver.py b/src/ML-M3GNET/m3gnet_driver.py
new file mode 100644
index 00000000000..0025c7edcfd
--- /dev/null
+++ b/src/ML-M3GNET/m3gnet_driver.py
@@ -0,0 +1,128 @@
+"""
+Copyright (c) 2022, AdvanceSoft Corp.
+
+This source code is licensed under the GNU General Public License Version 2
+found in the LICENSE file in the root directory of this source tree.
+"""
+
+from ase import Atoms
+from ase.calculators.mixing import SumCalculator
+
+from m3gnet.models import M3GNet, M3GNetCalculator, Potential
+
+def m3gnet_initialize(model_name = None, dftd3 = False):
+    """
+    Initialize GNNP of M3GNet.
+    Args:
+        model_name (str): name of model for GNNP.
+        dftd3 (bool): to add correction of DFT-D3.
+    Returns:
+        cutoff: cutoff radius.
+    """
+
+    # Create M3GNetCalculator, that is pre-trained
+    global myCalculator
+
+    if model_name is not None:
+        myM3GNet = M3GNet.load(model_name)
+    else:
+        myM3GNet = M3GNet.load()
+
+    myPotential  = Potential(myM3GNet)
+
+    myCalculator = M3GNetCalculator(
+        potential      = myPotential,
+        compute_stress = True,
+        stress_weight  = 1.0
+    )
+
+    # Add DFT-D3 to calculator without three-body term
+    global m3gnetCalculator
+    global dftd3Calculator
+
+    m3gnetCalculator = myCalculator
+    dftd3Calculator  = None
+
+    if dftd3:
+        from dftd3.ase import DFTD3
+        #from torch_dftd.torch_dftd3_calculator import TorchDFTD3Calculator
+
+        dftd3Calculator = DFTD3(
+            method  = "PBE",
+            damping = "d3zero",
+            s9      = 0.0
+        )
+        #dftd3Calculator = TorchDFTD3Calculator(
+        #    xc      = "pbe",
+        #    damping = "zero",
+        #    abc     = False
+        #)
+
+        myCalculator = SumCalculator([m3gnetCalculator, dftd3Calculator])
+
+    # Atoms object of ASE, that is empty here
+    global myAtoms
+
+    myAtoms = None
+
+    return myM3GNet.get_config().get("cutoff", 5.0)
+
+def m3gnet_get_energy_forces_stress(cell, atomic_numbers, positions):
+    """
+    Predict total energy, atomic forces and stress w/ pre-trained GNNP of M3GNet.
+    Args:
+        cell: lattice vectors in angstroms.
+        atomic_numbers: atomic numbers for all atoms.
+        positions: xyz coordinates for all atoms in angstroms.
+    Returns:
+        energy:  total energy.
+        forcces: atomic forces.
+        stress:  stress tensor (Voigt order).
+    """
+
+    # Initialize Atoms
+    global myAtoms
+    global myCalculator
+
+    if myAtoms is not None and len(myAtoms.numbers) != len(atomic_numbers):
+        myAtoms = None
+
+    if myAtoms is None:
+        myAtoms = Atoms(
+            numbers   = atomic_numbers,
+            positions = positions,
+            cell      = cell,
+            pbc       = [True, True, True]
+        )
+
+        myAtoms.calc = myCalculator
+
+    else:
+        myAtoms.set_cell(cell)
+        myAtoms.set_atomic_numbers(atomic_numbers)
+        myAtoms.set_positions(positions)
+
+    # Predicting energy, forces and stress
+    energy = myAtoms.get_potential_energy().item()
+    forces = myAtoms.get_forces().tolist()
+
+    global m3gnetCalculator
+    global dftd3Calculator
+
+    if dftd3Calculator is None:
+        stress = myAtoms.get_stress().tolist()
+    else:
+        # to avoid the bug of SumCalculator
+        myAtoms.calc = m3gnetCalculator
+        stress1 = myAtoms.get_stress()
+
+        myAtoms.calc = dftd3Calculator
+        stress2 = myAtoms.get_stress()
+
+        stress = stress1 + stress2
+        stress = stress.tolist()
+
+        myAtoms.calc = myCalculator
+
+    return energy, forces, stress
+
diff --git a/src/ML-M3GNET/matgl_driver.py b/src/ML-M3GNET/matgl_driver.py
new file mode 100644
index 00000000000..90d39f78670
--- /dev/null
+++ b/src/ML-M3GNET/matgl_driver.py
@@ -0,0 +1,127 @@
+"""
+Copyright (c) 2023, AdvanceSoft Corp.
+
+This source code is licensed under the GNU General Public License Version 2
+found in the LICENSE file in the root directory of this source tree.
+"""
+
+from ase import Atoms
+from ase.calculators.mixing import SumCalculator
+
+import matgl
+from matgl.ext.ase import M3GNetCalculator
+
+def m3gnet_initialize(model_name = None, dftd3 = False):
+    """
+    Initialize GNNP of M3GNet.
+    Args:
+        model_name (str): name of model for GNNP.
+        dftd3 (bool): to add correction of DFT-D3.
+    Returns:
+        cutoff: cutoff radius.
+    """
+
+    # Create M3GNetCalculator, that is pre-trained
+    global myCalculator
+
+    if model_name is not None:
+        myPotential = matgl.load_model(model_name)
+    else:
+        myPotential = matgl.load_model("M3GNet-MP-2021.2.8-PES")
+
+    myCalculator = M3GNetCalculator(
+        potential      = myPotential,
+        compute_stress = True,
+        stress_weight  = 1.0
+    )
+
+    # Add DFT-D3 to calculator without three-body term
+    global m3gnetCalculator
+    global dftd3Calculator
+
+    m3gnetCalculator = myCalculator
+    dftd3Calculator  = None
+
+    if dftd3:
+        from dftd3.ase import DFTD3
+        #from torch_dftd.torch_dftd3_calculator import TorchDFTD3Calculator
+
+        dftd3Calculator = DFTD3(
+            method  = "PBE",
+            damping = "d3zero",
+            s9      = 0.0
+        )
+        #dftd3Calculator = TorchDFTD3Calculator(
+        #    xc      = "pbe",
+        #    damping = "zero",
+        #    abc     = False
+        #)
+
+        myCalculator = SumCalculator([m3gnetCalculator, dftd3Calculator])
+
+    # Atoms object of ASE, that is empty here
+    global myAtoms
+
+    myAtoms = None
+
+    return myPotential.model.cutoff
+
+def m3gnet_get_energy_forces_stress(cell, atomic_numbers, positions):
+    """
+    Predict total energy, atomic forces and stress w/ pre-trained GNNP of M3GNet.
+    Args:
+        cell: lattice vectors in angstroms.
+        atomic_numbers: atomic numbers for all atoms.
+        positions: xyz coordinates for all atoms in angstroms.
+    Returns:
+        energy:  total energy.
+        forcces: atomic forces.
+        stress:  stress tensor (Voigt order).
+    """
+
+    # Initialize Atoms
+    global myAtoms
+    global myCalculator
+
+    if myAtoms is not None and len(myAtoms.numbers) != len(atomic_numbers):
+        myAtoms = None
+
+    if myAtoms is None:
+        myAtoms = Atoms(
+            numbers   = atomic_numbers,
+            positions = positions,
+            cell      = cell,
+            pbc       = [True, True, True]
+        )
+
+        myAtoms.calc = myCalculator
+
+    else:
+        myAtoms.set_cell(cell)
+        myAtoms.set_atomic_numbers(atomic_numbers)
+        myAtoms.set_positions(positions)
+
+    # Predicting energy, forces and stress
+    energy = myAtoms.get_potential_energy().item()
+    forces = myAtoms.get_forces().tolist()
+
+    global m3gnetCalculator
+    global dftd3Calculator
+
+    if dftd3Calculator is None:
+        stress = myAtoms.get_stress().tolist()
+    else:
+        # to avoid the bug of SumCalculator
+        myAtoms.calc = m3gnetCalculator
+        stress1 = myAtoms.get_stress()
+
+        myAtoms.calc = dftd3Calculator
+        stress2 = myAtoms.get_stress()
+
+        stress = stress1 + stress2
+        stress = stress.tolist()
+
+        myAtoms.calc = myCalculator
+
+    return energy, forces, stress
+
diff --git a/src/ML-M3GNET/pair_m3gnet.cpp b/src/ML-M3GNET/pair_m3gnet.cpp
new file mode 100644
index 00000000000..191e87f895d
--- /dev/null
+++ b/src/ML-M3GNET/pair_m3gnet.cpp
@@ -0,0 +1,727 @@
+/*
+ * Copyright (C) 2022 AdvanceSoft Corporation
+ *
+ * This source code is licensed under the GNU General Public License Version 2
+ * found in the LICENSE file in the root directory of this source tree.
+ */
+
+#include "pair_m3gnet.h"
+
+using namespace LAMMPS_NS;
+
+#define GPA_TO_EVA3  160.21766208
+
+PairM3GNet::PairM3GNet(LAMMPS *lmp) : Pair(lmp)
+{
+    single_enable           = 0;
+    restartinfo             = 0;
+    one_coeff               = 1;
+    manybody_flag           = 1;
+    no_virial_fdotr_compute = 1;
+    centroidstressflag      = CENTROID_NOTAVAIL;
+
+    this->atomNumMap        = nullptr;
+    this->maxinum           = 10;
+    this->initializedPython = 0;
+    this->cutoff            = 0.0;
+    this->npythonPath       = 0;
+    this->pythonPaths       = nullptr;
+    this->pyModule          = nullptr;
+    this->pyFunc            = nullptr;
+}
+
+PairM3GNet::~PairM3GNet()
+{
+    if (copymode)
+    {
+        return;
+    }
+
+    if (this->atomNumMap != nullptr)
+    {
+        delete[] this->atomNumMap;
+    }
+
+    if (allocated)
+    {
+        memory->destroy(cutsq);
+        memory->destroy(setflag);
+        memory->destroy(this->cell);
+        memory->destroy(this->atomNums);
+        memory->destroy(this->positions);
+        memory->destroy(this->forces);
+        memory->destroy(this->stress);
+    }
+
+    if (this->pythonPaths != nullptr)
+    {
+        for (int i = 0; i < this->npythonPath; ++i)
+        {
+            delete[] this->pythonPaths[i];
+        }
+
+        delete[] this->pythonPaths;
+    }
+
+    if (this->initializedPython)
+    {
+        this->finalizePython();
+    }
+}
+
+void PairM3GNet::allocate()
+{
+    allocated = 1;
+
+    const int ntypes = atom->ntypes;
+
+    memory->create(cutsq,   ntypes + 1, ntypes + 1,   "pair:cutsq");
+    memory->create(setflag, ntypes + 1, ntypes + 1,   "pair:setflag");
+
+    memory->create(this->cell,      3, 3,             "pair:cell");
+    memory->create(this->atomNums,  this->maxinum,    "pair:atomNums");
+    memory->create(this->positions, this->maxinum, 3, "pair:positions");
+    memory->create(this->forces,    this->maxinum, 3, "pair:forces");
+    memory->create(this->stress,    6,                "pair:stress");
+}
+
+void PairM3GNet::compute(int eflag, int vflag)
+{
+    ev_init(eflag, vflag);
+
+    if (eflag_atom)
+    {
+        error->all(FLERR, "Pair style M3GNet does not support atomic energy");
+    }
+
+    if (vflag_atom)
+    {
+        error->all(FLERR, "Pair style M3GNet does not support atomic virial pressure");
+    }
+
+    this->prepareGNN();
+
+    this->performGNN();
+}
+
+void PairM3GNet::prepareGNN()
+{
+    int i;
+    int iatom;
+
+    int*  type = atom->type;
+    double** x = atom->x;
+
+    int  inum  = list->inum;
+    int* ilist = list->ilist;
+
+    double* boxlo = domain->boxlo;
+
+    // grow with inum and nneigh
+    if (inum > this->maxinum)
+    {
+        this->maxinum = inum + this->maxinum / 2;
+
+        memory->grow(this->atomNums,  this->maxinum,    "pair:atomNums");
+        memory->grow(this->positions, this->maxinum, 3, "pair:positions");
+        memory->grow(this->forces,    this->maxinum, 3, "pair:forces");
+    }
+
+    // set cell
+    this->cell[0][0] = domain->h[0]; // xx
+    this->cell[1][1] = domain->h[1]; // yy
+    this->cell[2][2] = domain->h[2]; // zz
+    this->cell[2][1] = domain->h[3]; // yz
+    this->cell[2][0] = domain->h[4]; // xz
+    this->cell[1][0] = domain->h[5]; // xy
+    this->cell[0][1] = 0.0;
+    this->cell[0][2] = 0.0;
+    this->cell[1][2] = 0.0;
+
+    // set atomNums and positions
+    #pragma omp parallel for private(iatom, i)
+    for (iatom = 0; iatom < inum; ++iatom)
+    {
+        i = ilist[iatom];
+
+        this->atomNums[iatom] = this->atomNumMap[type[i]];
+
+        this->positions[iatom][0] = x[i][0] - boxlo[0];
+        this->positions[iatom][1] = x[i][1] - boxlo[1];
+        this->positions[iatom][2] = x[i][2] - boxlo[2];
+    }
+}
+
+void PairM3GNet::performGNN()
+{
+    int i;
+    int iatom;
+
+    double** f = atom->f;
+
+    int  inum  = list->inum;
+    int* ilist = list->ilist;
+
+    double volume;
+    double factor;
+    double evdwl = 0.0;
+
+    // perform Graph Neural Network Potential of M3GNet
+    evdwl = this->calculatePython();
+
+    // set total energy
+    if (eflag_global)
+    {
+        eng_vdwl += evdwl;
+    }
+
+    // set atomic forces
+    for (iatom = 0; iatom < inum; ++iatom)
+    {
+        i = ilist[iatom];
+
+        f[i][0] += this->forces[iatom][0];
+        f[i][1] += this->forces[iatom][1];
+        f[i][2] += this->forces[iatom][2];
+    }
+
+    // set virial pressure
+    if (vflag_global)
+    {
+        // GPa -> eV/A^3
+        volume = domain->xprd * domain->yprd * domain->zprd;
+        factor = volume / GPA_TO_EVA3;
+
+        virial[0] -= factor * this->stress[0]; // xx
+        virial[1] -= factor * this->stress[1]; // yy
+        virial[2] -= factor * this->stress[2]; // zz
+        virial[3] -= factor * this->stress[3]; // yz
+        virial[4] -= factor * this->stress[4]; // xz
+        virial[5] -= factor * this->stress[5]; // xy
+    }
+}
+
+void PairM3GNet::settings(int narg, char **arg)
+{
+    if (comm->nprocs > 1)
+    {
+        error->all(FLERR, "Pair style M3GNet does not support MPI parallelization");
+    }
+
+    if (narg < 1)
+    {
+        return;
+    }
+
+    this->npythonPath = narg;
+    this->pythonPaths = new char*[this->npythonPath];
+
+    for (int i = 0; i < this->npythonPath; ++i)
+    {
+        this->pythonPaths[i] = new char[512];
+        strcpy(this->pythonPaths[i], arg[i]);
+    }
+}
+
+void PairM3GNet::coeff(int narg, char **arg)
+{
+    int i, j;
+    int count;
+
+    int ntypes = atom->ntypes;
+    int ntypesEff;
+
+    int dftd3 = withDFTD3();
+
+    if (narg != (3 + ntypes))
+    {
+        error->all(FLERR, "Incorrect number of arguments for pair_coeff.");
+    }
+
+    if (strcmp(arg[0], "*") != 0 || strcmp(arg[1], "*") != 0)
+    {
+        error->all(FLERR, "Only wildcard asterisk is allowed in place of atom types for pair_coeff.");
+    }
+
+    if (this->atomNumMap != nullptr)
+    {
+        delete this->atomNumMap;
+    }
+
+    this->atomNumMap = new int[ntypes + 1];
+
+    ntypesEff = 0;
+    for (i = 0; i < ntypes; ++i)
+    {
+        if (strcmp(arg[i + 3], "NULL") == 0)
+        {
+            this->atomNumMap[i + 1] = 0;
+        }
+        else
+        {
+            this->atomNumMap[i + 1] = this->elementToAtomNum(arg[i + 3]);
+            ntypesEff++;
+        }
+    }
+
+    if (ntypesEff < 1)
+    {
+        error->all(FLERR, "There are no elements for pair_coeff of M3GNet.");
+    }
+
+    if (!allocated)
+    {
+        allocate();
+    }
+
+    if (this->initializedPython)
+    {
+        this->finalizePython();
+    }
+
+    this->cutoff = this->initializePython(arg[2], dftd3);
+
+    if (this->cutoff <= 0.0)
+    {
+        error->all(FLERR, "Cutoff is not positive for pair_coeff of M3GNet.");
+    }
+
+    count = 0;
+
+    for (i = 1; i <= ntypes; ++i)
+    {
+        for (j = i; j <= ntypes; ++j)
+        {
+            if (this->atomNumMap[i] > 0 && this->atomNumMap[j] > 0)
+            {
+                setflag[i][j] = 1;
+                count++;
+            }
+            else
+            {
+                setflag[i][j] = 0;
+            }
+        }
+    }
+
+    if (count == 0)
+    {
+        error->all(FLERR, "Incorrect args for pair coefficients");
+    }
+}
+
+double PairM3GNet::init_one(int i, int j)
+{
+    if (setflag[i][j] == 0)
+    {
+        error->all(FLERR, "All pair coeffs are not set");
+    }
+
+    double r, rr;
+
+    r = this->cutoff;
+    rr = r * r;
+
+    cutsq[i][j] = rr;
+    cutsq[j][i] = rr;
+
+    return r;
+}
+
+void PairM3GNet::init_style()
+{
+    if (strcmp(update->unit_style, "metal") != 0)
+    {
+        error->all(FLERR, "Pair style M3GNet requires 'units metal'");
+    }
+
+    int* periodicity = domain->periodicity;
+
+    if (!(periodicity[0] && periodicity[1] && periodicity[2]))
+    {
+        error->all(FLERR, "Pair style M3GNet requires periodic boundary condition");
+    }
+
+    neighbor->add_request(this, NeighConst::REQ_FULL);
+}
+
+int PairM3GNet::withDFTD3()
+{
+    return 0;
+}
+
+void PairM3GNet::finalizePython()
+{
+    if (this->initializedPython == 0)
+    {
+        return;
+    }
+
+    Py_XDECREF(this->pyFunc);
+    Py_XDECREF(this->pyModule);
+
+    Py_Finalize();
+}
+
+double PairM3GNet::initializePython(const char *name, int dftd3)
+{
+    if (this->initializedPython != 0)
+    {
+        return this->cutoff;
+    }
+
+    double cutoff = -1.0;
+
+    PyObject* pySys    = nullptr;
+    PyObject* pyPath   = nullptr;
+    PyObject* pyName   = nullptr;
+    PyObject* pyModule = nullptr;
+    PyObject* pyFunc   = nullptr;
+    PyObject* pyArgs   = nullptr;
+    PyObject* pyArg1   = nullptr;
+    PyObject* pyArg2   = nullptr;
+    PyObject* pyValue  = nullptr;
+
+    Py_Initialize();
+
+    pySys  = PyImport_ImportModule("sys");
+    pyPath = PyObject_GetAttrString(pySys, "path");
+
+    pyName = PyUnicode_DecodeFSDefault(".");
+    if (pyName != nullptr)
+    {
+        PyList_Append(pyPath, pyName);
+        Py_DECREF(pyName);
+    }
+
+    if (this->pythonPaths != nullptr)
+    {
+        for (int i = 0; i < this->npythonPath; ++i)
+        {
+            pyName = PyUnicode_DecodeFSDefault(this->pythonPaths[i]);
+            if (pyName != nullptr)
+            {
+                PyList_Append(pyPath, pyName);
+                Py_DECREF(pyName);
+            }
+        }
+    }
+
+    if (strcmp(name, "MP-2021.2.8-EFS") == 0)
+    {
+        pyName = PyUnicode_DecodeFSDefault("m3gnet_driver");
+    }
+    else
+    {
+        pyName = PyUnicode_DecodeFSDefault("matgl_driver");
+    }
+
+    if (pyName != nullptr)
+    {
+        pyModule = PyImport_Import(pyName);
+        Py_DECREF(pyName);
+    }
+
+    if (pyModule != nullptr)
+    {
+        pyFunc = PyObject_GetAttrString(pyModule, "m3gnet_initialize");
+
+        if (pyFunc != nullptr && PyCallable_Check(pyFunc))
+        {
+            pyArg1 = PyUnicode_FromString(name);
+            pyArg2 = PyBool_FromLong(dftd3);
+
+            pyArgs = PyTuple_New(2);
+            PyTuple_SetItem(pyArgs, 0, pyArg1);
+            PyTuple_SetItem(pyArgs, 1, pyArg2);
+
+            pyValue = PyObject_CallObject(pyFunc, pyArgs);
+
+            Py_DECREF(pyArgs);
+
+            if (pyValue != nullptr && PyFloat_Check(pyValue))
+            {
+                this->initializedPython = 1;
+                cutoff = PyFloat_AsDouble(pyValue);
+            }
+            else
+            {
+                if (PyErr_Occurred()) PyErr_Print();
+            }
+
+            Py_XDECREF(pyValue);
+        }
+
+        else
+        {
+            if (PyErr_Occurred()) PyErr_Print();
+        }
+
+        Py_XDECREF(pyFunc);
+
+        pyFunc = PyObject_GetAttrString(pyModule, "m3gnet_get_energy_forces_stress");
+
+        if (pyFunc != nullptr && PyCallable_Check(pyFunc))
+        {
+            // NOP
+        }
+        else
+        {
+            this->initializedPython = 0;
+            if (PyErr_Occurred()) PyErr_Print();
+        }
+
+        //Py_XDECREF(pyFunc);
+        //Py_DECREF(pyModule);
+    }
+
+    else
+    {
+        if (PyErr_Occurred()) PyErr_Print();
+    }
+
+    if (this->initializedPython == 0)
+    {
+        Py_XDECREF(pyFunc);
+        Py_XDECREF(pyModule);
+
+        Py_Finalize();
+
+        error->all(FLERR, "Cannot initialize python for pair_coeff of M3GNet.");
+    }
+
+    this->pyModule = pyModule;
+    this->pyFunc   = pyFunc;
+
+    return cutoff;
+}
+
+double PairM3GNet::calculatePython()
+{
+    int i;
+    int iatom;
+    int natom = list->inum;
+
+    double energy = 0.0;
+    int hasEnergy = 0;
+    int hasForces = 0;
+    int hasStress = 0;
+
+    PyObject* pyFunc  = this->pyFunc;
+    PyObject* pyArgs  = nullptr;
+    PyObject* pyArg1  = nullptr;
+    PyObject* pyArg2  = nullptr;
+    PyObject* pyArg3  = nullptr;
+    PyObject* pyAsub  = nullptr;
+    PyObject* pyValue = nullptr;
+    PyObject* pyVal1  = nullptr;
+    PyObject* pyVal2  = nullptr;
+    PyObject* pyVal3  = nullptr;
+    PyObject* pyVsub  = nullptr;
+    PyObject* pyVobj  = nullptr;
+
+    // set cell -> pyArgs1
+    pyArg1 = PyList_New(3);
+
+    for (i = 0; i < 3; ++i)
+    {
+        pyAsub = PyList_New(3);
+        PyList_SetItem(pyAsub, 0, PyFloat_FromDouble(this->cell[i][0]));
+        PyList_SetItem(pyAsub, 1, PyFloat_FromDouble(this->cell[i][1]));
+        PyList_SetItem(pyAsub, 2, PyFloat_FromDouble(this->cell[i][2]));
+        PyList_SetItem(pyArg1, i, pyAsub);
+    }
+
+    // set atomNums -> pyArgs2
+    pyArg2 = PyList_New(natom);
+
+    for (iatom = 0; iatom < natom; ++iatom)
+    {
+        PyList_SetItem(pyArg2, iatom, PyLong_FromLong(this->atomNums[iatom]));
+    }
+
+    // set positions -> pyArgs3
+    pyArg3 = PyList_New(natom);
+
+    for (iatom = 0; iatom < natom; ++iatom)
+    {
+        pyAsub = PyList_New(3);
+        PyList_SetItem(pyAsub, 0, PyFloat_FromDouble(this->positions[iatom][0]));
+        PyList_SetItem(pyAsub, 1, PyFloat_FromDouble(this->positions[iatom][1]));
+        PyList_SetItem(pyAsub, 2, PyFloat_FromDouble(this->positions[iatom][2]));
+        PyList_SetItem(pyArg3, iatom, pyAsub);
+    }
+
+    // call function
+    pyArgs = PyTuple_New(3);
+    PyTuple_SetItem(pyArgs, 0, pyArg1);
+    PyTuple_SetItem(pyArgs, 1, pyArg2);
+    PyTuple_SetItem(pyArgs, 2, pyArg3);
+
+    pyValue = PyObject_CallObject(pyFunc, pyArgs);
+
+    Py_DECREF(pyArgs);
+
+    if (pyValue != nullptr && PyTuple_Check(pyValue) && PyTuple_Size(pyValue) >= 3)
+    {
+        // get energy <- pyValue
+        pyVal1 = PyTuple_GetItem(pyValue, 0);
+        if (pyVal1 != nullptr && PyFloat_Check(pyVal1))
+        {
+            hasEnergy = 1;
+            energy = PyFloat_AsDouble(pyVal1);
+        }
+        else
+        {
+            if (PyErr_Occurred()) PyErr_Print();
+        }
+
+        // get forces <- pyValue
+        pyVal2 = PyTuple_GetItem(pyValue, 1);
+        if (pyVal2 != nullptr && PyList_Check(pyVal2) && PyList_Size(pyVal2) >= natom)
+        {
+            hasForces = 1;
+
+            for (iatom = 0; iatom < natom; ++iatom)
+            {
+                pyVsub = PyList_GetItem(pyVal2, iatom);
+                if (pyVsub != nullptr && PyList_Check(pyVsub) && PyList_Size(pyVsub) >= 3)
+                {
+                    for (i = 0; i < 3; ++i)
+                    {
+                        pyVobj = PyList_GetItem(pyVsub, i);
+                        if (pyVobj != nullptr && PyFloat_Check(pyVobj))
+                        {
+                            this->forces[iatom][i] = PyFloat_AsDouble(pyVobj);
+                        }
+                        else
+                        {
+                            if (PyErr_Occurred()) PyErr_Print();
+                            hasForces = 0;
+                            break;
+                        }
+                    }
+                }
+                else
+                {
+                    if (PyErr_Occurred()) PyErr_Print();
+                    hasForces = 0;
+                    break;
+                }
+
+                if (hasForces == 0)
+                {
+                    break;
+                }
+            }
+        }
+        else
+        {
+            if (PyErr_Occurred()) PyErr_Print();
+        }
+
+        // get stress <- pyValue
+        pyVal3 = PyTuple_GetItem(pyValue, 2);
+        if (pyVal3 != nullptr && PyList_Check(pyVal3) && PyList_Size(pyVal3) >= 6)
+        {
+            hasStress = 1;
+
+            for (i = 0; i < 6; ++i)
+            {
+                pyVobj = PyList_GetItem(pyVal3, i);
+                if (pyVobj != nullptr && PyFloat_Check(pyVobj))
+                {
+                    this->stress[i] = PyFloat_AsDouble(pyVobj);
+                }
+                else
+                {
+                    if (PyErr_Occurred()) PyErr_Print();
+                    hasStress = 0;
+                    break;
+                }
+            }
+        }
+        else
+        {
+            if (PyErr_Occurred()) PyErr_Print();
+        }
+    }
+
+    else
+    {
+        if (PyErr_Occurred()) PyErr_Print();
+    }
+
+    Py_XDECREF(pyValue);
+
+    if (hasEnergy == 0 || hasForces == 0 || hasStress == 0)
+    {
+        error->all(FLERR, "Cannot calculate energy, forces and stress by python of M3GNet.");
+    }
+
+    return energy;
+}
+
+static const int NUM_ELEMENTS = 118;
+
+static const char* ALL_ELEMENTS[] = {
+    "H",  "He", "Li", "Be", "B",  "C",  "N",  "O",  "F",  "Ne", "Na", "Mg", "Al", "Si", "P",  "S",
+    "Cl", "Ar", "K",  "Ca", "Sc", "Ti", "V",  "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn", "Ga", "Ge",
+    "As", "Se", "Br", "Kr", "Rb", "Sr", "Y",  "Zr", "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd",
+    "In", "Sn", "Sb", "Te", "I",  "Xe", "Cs", "Ba", "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd",
+    "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W",  "Re", "Os", "Ir", "Pt", "Au", "Hg",
+    "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", "Ac", "Th", "Pa", "U",  "Np", "Pu", "Am", "Cm",
+    "Bk", "Cf", "Es", "Fm", "Md", "No", "Lr", "Rf", "Db", "Sg", "Bh", "Hs", "Mt", "Ds", "Rg", "Cn",
+    "Nh", "Fl", "Mc", "Lv", "Ts", "Og"
+};
+
+int PairM3GNet::elementToAtomNum(const char *elem)
+{
+    char elem1[16];
+
+    strcpy(elem1, elem);
+
+    this->toRealElement(elem1);
+
+    if (strlen(elem1) > 0)
+    {
+        for (int i = 0; i < NUM_ELEMENTS; ++i)
+        {
+            if (strcasecmp(elem1, ALL_ELEMENTS[i]) == 0)
+            {
+                return (i + 1);
+            }
+        }
+    }
+
+    char estr[256];
+    sprintf(estr, "Incorrect name of element: %s", elem);
+    error->all(FLERR, estr);
+
+    return 0;
+}
+
+void PairM3GNet::toRealElement(char *elem)
+{
+    int n = strlen(elem);
+    n = n > 2 ? 2 : n;
+
+    int m = n;
+
+    for (int i = 0; i < n; ++i)
+    {
+        char c = elem[i];
+        if (c == '0' || c == '1' || c == '2' || c == '3' || c == '4' ||
+            c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == ' ' ||
+            c == '_' || c == '-' || c == '+' || c == '*' || c == '~' || c == ':' || c == '#')
+        {
+            m = i;
+            break;
+        }
+
+        elem[i] = c;
+    }
+
+    elem[m] = '\0';
+}
+
diff --git a/src/ML-M3GNET/pair_m3gnet.h b/src/ML-M3GNET/pair_m3gnet.h
new file mode 100644
index 00000000000..26912fa05f9
--- /dev/null
+++ b/src/ML-M3GNET/pair_m3gnet.h
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2022 AdvanceSoft Corporation
+ *
+ * This source code is licensed under the GNU General Public License Version 2
+ * found in the LICENSE file in the root directory of this source tree.
+ */
+
+#ifdef PAIR_CLASS
+
+PairStyle(m3gnet, PairM3GNet)
+
+#else
+
+#ifndef LMP_PAIR_M3GNET_H_
+#define LMP_PAIR_M3GNET_H_
+
+#include <Python.h>
+#include "atom.h"
+#include "comm.h"
+#include "error.h"
+#include "pair.h"
+#include "force.h"
+#include "update.h"
+#include "memory.h"
+#include "neigh_list.h"
+#include "neigh_request.h"
+#include "neighbor.h"
+#include "domain.h"
+
+namespace LAMMPS_NS
+{
+
+class PairM3GNet: public Pair
+{
+public:
+    PairM3GNet(class LAMMPS*);
+
+    virtual ~PairM3GNet() override;
+
+    void compute(int, int) override;
+
+    void settings(int, char **) override;
+
+    void coeff(int, char **) override;
+
+    double init_one(int, int) override;
+
+    void init_style() override;
+
+protected:
+    virtual int withDFTD3();
+
+private:
+    int*      atomNumMap;
+    int*      atomNums;
+    double**  cell;
+    double**  positions;
+    double**  forces;
+    double*   stress;
+
+    int       maxinum;
+    int       initializedPython;
+    double    cutoff;
+
+    int       npythonPath;
+    char**    pythonPaths;
+
+    PyObject* pyModule;
+    PyObject* pyFunc;
+
+    void allocate();
+
+    void prepareGNN();
+
+    void performGNN();
+
+    void finalizePython();
+
+    double initializePython(const char *name, int dftd3);
+
+    double calculatePython();
+
+    int elementToAtomNum(const char *elem);
+
+    void toRealElement(char *elem);
+};
+
+}  // namespace LAMMPS_NS
+
+#endif /* LMP_PAIR_M3GNET_H_ */
+#endif
diff --git a/src/ML-M3GNET/pair_m3gnet_d3.cpp b/src/ML-M3GNET/pair_m3gnet_d3.cpp
new file mode 100644
index 00000000000..e1afe423486
--- /dev/null
+++ b/src/ML-M3GNET/pair_m3gnet_d3.cpp
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2022 AdvanceSoft Corporation
+ *
+ * This source code is licensed under the GNU General Public License Version 2
+ * found in the LICENSE file in the root directory of this source tree.
+ */
+
+#include "pair_m3gnet_d3.h"
+
+using namespace LAMMPS_NS;
+
+PairM3GNetD3::PairM3GNetD3(LAMMPS *lmp) : PairM3GNet(lmp)
+{
+    if (copymode)
+    {
+        return;
+    }
+
+    // NOP
+}
+
+PairM3GNetD3::~PairM3GNetD3()
+{
+    // NOP
+}
+
+int PairM3GNetD3::withDFTD3()
+{
+    return 1;
+}
+
diff --git a/src/ML-M3GNET/pair_m3gnet_d3.h b/src/ML-M3GNET/pair_m3gnet_d3.h
new file mode 100644
index 00000000000..a20b301d6a3
--- /dev/null
+++ b/src/ML-M3GNET/pair_m3gnet_d3.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2022 AdvanceSoft Corporation
+ *
+ * This source code is licensed under the GNU General Public License Version 2
+ * found in the LICENSE file in the root directory of this source tree.
+ */
+
+#ifdef PAIR_CLASS
+
+PairStyle(m3gnet/d3, PairM3GNetD3)
+
+#else
+
+#ifndef LMP_PAIR_M3GNET_D3_H_
+#define LMP_PAIR_M3GNET_D3_H_
+
+#include "pair_m3gnet.h"
+
+namespace LAMMPS_NS
+{
+
+class PairM3GNetD3: public PairM3GNet
+{
+public:
+    PairM3GNetD3(class LAMMPS*);
+
+    virtual ~PairM3GNetD3() override;
+
+protected:
+    int withDFTD3() override;
+};
+
+}  // namespace LAMMPS_NS
+
+#endif /* LMP_PAIR_M3GNET_D3_H_ */
+#endif
